name: 'Test Service'
description:  'Runs and publishes the integration tests for a service in the space sdk environment'
inputs:
    service_name:
        description: 'The name of the service to test'
        required: true
    env_file:
        description: 'The path to the environment file'
        required: true
    registry_name:
        description: 'The name of the registry'
        default: 'ghcr.io/microsoft/ao-spacesdk'
    GIT_HUB_USER_NAME:
        description: 'The github user name'
        required: true
    GIT_HUB_USER_TOKEN:
        description: 'The github user token'
        required: true
    SETUP_REPO_URL:
        description: 'The setup repo url'
        required: true
  
outputs:
    test_results:
        description: 'The path to the spacesdk directory'
        value: '/var/spacedev/tmp/test-results.xml'
runs:
    using: 'composite'
    steps:
        ## Run composite action to intialize SDK environment
        - uses: microsoft/azure-orbital-space-sdk-github-actions/composite-actions/initiliaze@main
            env_file: ${{ inputs.env_file }}
            REGISTRY: ${{ inputs.registry_name }}
            GIT_HUB_USER_NAME: ${{ inputs.GIT_HUB_USER_NAME }}
            GIT_HUB_USER_TOKEN: ${{ inputs.GIT_HUB_USER_TOKEN }}
            SETUP_REPO_URL: ${{ inputs.SETUP_REPO_URL }}
        
        ## Build the Service's Devcontainer and wait for pods to spin up (unnecessary when devcontainer up composite action is available)
        - name: Build Devcontainer
          run: |

            devcontainer up --workspace-folder ${pwd} --workspace-mount-consistency cached --id-label devcontainer.local_folder=${PWD} --default-user-env-probe loginInteractiveShell --build-no-cache --remove-existing-container --mount type=volume,source=vscode,target=/vscode,external=true --update-remote-user-uid-default on --mount-workspace-git-root true
            echo $?

            # Wait for pods to be ready
            output=$(k3s kubectl get pods -A -o jsonpath='{range .items[*]}{.status.phase}{"\n"}{end}')

            # Check if the output only contains "Succeeded" and "Running"
            while read -r line; do
            if [[ "$line" != "Succeeded" && "$line" != "Running" ]]; then
                echo "Not all pods are 'Succeeded' or 'Running'..."
                sleep 5
                k3s kubectl get pods -A
                output=$(k3s kubectl get pods -A -o jsonpath='{range .items[*]}{.status.phase}{"\n"}{end}')
                continue 2
            fi
            done <<< "$output"
            k3s kubectl get pods -A

        - name: Build Service
          run: |

            docker exec ${{ inputs.service_name }} bash -c "dotnet build /workspaces/${{ inputs.service_name }}/src"
            echo $?

            docker exec ${{ inputs.service_name }} bash -c "dotnet build /workspaces/${{ inputs.service_name }}/test/integrationTestPlugin"
            echo $?

            docker exec ${{ inputs.service_name }} bash -c "dotnet build /workspaces/${{ inputs.service_name }}/test/integrationTests"
            echo $?

            kubectl exec -n payload-app deploy/${{ inputs.service_name }} -- bash -c "/usr/bin/dotnet  /workspaces/${{ inputs.service_name }}/src/bin/Debug/net6.0/${{ inputs.service_name }}.dll" &

            kubectl exec -n payload-app deploy/${{ inputs.service_name }}-client -- bash -c "/usr/bin/dotnet test --verbosity detailed /workspaces/${{ inputs.service_name }}/test/integrationTests/bin/Debug/net6.0/integrationTests.dll --logger \"junit;LogFileName=/var/spacedev/tmp/test-results.xml\""
            echo $?

        - name: Publish Test Results
          uses: EnricoMi/publish-unit-test-result-action@v2
          if: always()
          with:
            junit_files:  /var/spacedev/tmp/test-results.xml
